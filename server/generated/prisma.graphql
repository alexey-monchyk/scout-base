type Actor {
  id: ID!
  name: String!
  birthday: DateTime!
  country: String!
  movies(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movie!]
  directors(where: DirectorWhereInput, orderBy: DirectorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Director!]
}

type ActorConnection {
  pageInfo: PageInfo!
  edges: [ActorEdge]!
  aggregate: AggregateActor!
}

input ActorCreateInput {
  id: ID
  name: String!
  birthday: DateTime!
  country: String!
  movies: MovieCreateManyWithoutActorsInput
  directors: DirectorCreateManyWithoutActorsInput
}

input ActorCreateManyWithoutDirectorsInput {
  create: [ActorCreateWithoutDirectorsInput!]
  connect: [ActorWhereUniqueInput!]
}

input ActorCreateManyWithoutMoviesInput {
  create: [ActorCreateWithoutMoviesInput!]
  connect: [ActorWhereUniqueInput!]
}

input ActorCreateWithoutDirectorsInput {
  id: ID
  name: String!
  birthday: DateTime!
  country: String!
  movies: MovieCreateManyWithoutActorsInput
}

input ActorCreateWithoutMoviesInput {
  id: ID
  name: String!
  birthday: DateTime!
  country: String!
  directors: DirectorCreateManyWithoutActorsInput
}

type ActorEdge {
  node: Actor!
  cursor: String!
}

enum ActorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  birthday_ASC
  birthday_DESC
  country_ASC
  country_DESC
}

type ActorPreviousValues {
  id: ID!
  name: String!
  birthday: DateTime!
  country: String!
}

input ActorScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  AND: [ActorScalarWhereInput!]
  OR: [ActorScalarWhereInput!]
  NOT: [ActorScalarWhereInput!]
}

type ActorSubscriptionPayload {
  mutation: MutationType!
  node: Actor
  updatedFields: [String!]
  previousValues: ActorPreviousValues
}

input ActorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ActorWhereInput
  AND: [ActorSubscriptionWhereInput!]
  OR: [ActorSubscriptionWhereInput!]
  NOT: [ActorSubscriptionWhereInput!]
}

input ActorUpdateInput {
  name: String
  birthday: DateTime
  country: String
  movies: MovieUpdateManyWithoutActorsInput
  directors: DirectorUpdateManyWithoutActorsInput
}

input ActorUpdateManyDataInput {
  name: String
  birthday: DateTime
  country: String
}

input ActorUpdateManyMutationInput {
  name: String
  birthday: DateTime
  country: String
}

input ActorUpdateManyWithoutDirectorsInput {
  create: [ActorCreateWithoutDirectorsInput!]
  delete: [ActorWhereUniqueInput!]
  connect: [ActorWhereUniqueInput!]
  set: [ActorWhereUniqueInput!]
  disconnect: [ActorWhereUniqueInput!]
  update: [ActorUpdateWithWhereUniqueWithoutDirectorsInput!]
  upsert: [ActorUpsertWithWhereUniqueWithoutDirectorsInput!]
  deleteMany: [ActorScalarWhereInput!]
  updateMany: [ActorUpdateManyWithWhereNestedInput!]
}

input ActorUpdateManyWithoutMoviesInput {
  create: [ActorCreateWithoutMoviesInput!]
  delete: [ActorWhereUniqueInput!]
  connect: [ActorWhereUniqueInput!]
  set: [ActorWhereUniqueInput!]
  disconnect: [ActorWhereUniqueInput!]
  update: [ActorUpdateWithWhereUniqueWithoutMoviesInput!]
  upsert: [ActorUpsertWithWhereUniqueWithoutMoviesInput!]
  deleteMany: [ActorScalarWhereInput!]
  updateMany: [ActorUpdateManyWithWhereNestedInput!]
}

input ActorUpdateManyWithWhereNestedInput {
  where: ActorScalarWhereInput!
  data: ActorUpdateManyDataInput!
}

input ActorUpdateWithoutDirectorsDataInput {
  name: String
  birthday: DateTime
  country: String
  movies: MovieUpdateManyWithoutActorsInput
}

input ActorUpdateWithoutMoviesDataInput {
  name: String
  birthday: DateTime
  country: String
  directors: DirectorUpdateManyWithoutActorsInput
}

input ActorUpdateWithWhereUniqueWithoutDirectorsInput {
  where: ActorWhereUniqueInput!
  data: ActorUpdateWithoutDirectorsDataInput!
}

input ActorUpdateWithWhereUniqueWithoutMoviesInput {
  where: ActorWhereUniqueInput!
  data: ActorUpdateWithoutMoviesDataInput!
}

input ActorUpsertWithWhereUniqueWithoutDirectorsInput {
  where: ActorWhereUniqueInput!
  update: ActorUpdateWithoutDirectorsDataInput!
  create: ActorCreateWithoutDirectorsInput!
}

input ActorUpsertWithWhereUniqueWithoutMoviesInput {
  where: ActorWhereUniqueInput!
  update: ActorUpdateWithoutMoviesDataInput!
  create: ActorCreateWithoutMoviesInput!
}

input ActorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  movies_every: MovieWhereInput
  movies_some: MovieWhereInput
  movies_none: MovieWhereInput
  directors_every: DirectorWhereInput
  directors_some: DirectorWhereInput
  directors_none: DirectorWhereInput
  AND: [ActorWhereInput!]
  OR: [ActorWhereInput!]
  NOT: [ActorWhereInput!]
}

input ActorWhereUniqueInput {
  id: ID
}

type AggregateActor {
  count: Int!
}

type AggregateDirector {
  count: Int!
}

type AggregateMovie {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Director {
  id: ID!
  name: String!
  birthday: DateTime!
  country: String!
  actors(where: ActorWhereInput, orderBy: ActorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Actor!]
}

type DirectorConnection {
  pageInfo: PageInfo!
  edges: [DirectorEdge]!
  aggregate: AggregateDirector!
}

input DirectorCreateInput {
  id: ID
  name: String!
  birthday: DateTime!
  country: String!
  actors: ActorCreateManyWithoutDirectorsInput
}

input DirectorCreateManyWithoutActorsInput {
  create: [DirectorCreateWithoutActorsInput!]
  connect: [DirectorWhereUniqueInput!]
}

input DirectorCreateWithoutActorsInput {
  id: ID
  name: String!
  birthday: DateTime!
  country: String!
}

type DirectorEdge {
  node: Director!
  cursor: String!
}

enum DirectorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  birthday_ASC
  birthday_DESC
  country_ASC
  country_DESC
}

type DirectorPreviousValues {
  id: ID!
  name: String!
  birthday: DateTime!
  country: String!
}

input DirectorScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  AND: [DirectorScalarWhereInput!]
  OR: [DirectorScalarWhereInput!]
  NOT: [DirectorScalarWhereInput!]
}

type DirectorSubscriptionPayload {
  mutation: MutationType!
  node: Director
  updatedFields: [String!]
  previousValues: DirectorPreviousValues
}

input DirectorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DirectorWhereInput
  AND: [DirectorSubscriptionWhereInput!]
  OR: [DirectorSubscriptionWhereInput!]
  NOT: [DirectorSubscriptionWhereInput!]
}

input DirectorUpdateInput {
  name: String
  birthday: DateTime
  country: String
  actors: ActorUpdateManyWithoutDirectorsInput
}

input DirectorUpdateManyDataInput {
  name: String
  birthday: DateTime
  country: String
}

input DirectorUpdateManyMutationInput {
  name: String
  birthday: DateTime
  country: String
}

input DirectorUpdateManyWithoutActorsInput {
  create: [DirectorCreateWithoutActorsInput!]
  delete: [DirectorWhereUniqueInput!]
  connect: [DirectorWhereUniqueInput!]
  set: [DirectorWhereUniqueInput!]
  disconnect: [DirectorWhereUniqueInput!]
  update: [DirectorUpdateWithWhereUniqueWithoutActorsInput!]
  upsert: [DirectorUpsertWithWhereUniqueWithoutActorsInput!]
  deleteMany: [DirectorScalarWhereInput!]
  updateMany: [DirectorUpdateManyWithWhereNestedInput!]
}

input DirectorUpdateManyWithWhereNestedInput {
  where: DirectorScalarWhereInput!
  data: DirectorUpdateManyDataInput!
}

input DirectorUpdateWithoutActorsDataInput {
  name: String
  birthday: DateTime
  country: String
}

input DirectorUpdateWithWhereUniqueWithoutActorsInput {
  where: DirectorWhereUniqueInput!
  data: DirectorUpdateWithoutActorsDataInput!
}

input DirectorUpsertWithWhereUniqueWithoutActorsInput {
  where: DirectorWhereUniqueInput!
  update: DirectorUpdateWithoutActorsDataInput!
  create: DirectorCreateWithoutActorsInput!
}

input DirectorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  actors_every: ActorWhereInput
  actors_some: ActorWhereInput
  actors_none: ActorWhereInput
  AND: [DirectorWhereInput!]
  OR: [DirectorWhereInput!]
  NOT: [DirectorWhereInput!]
}

input DirectorWhereUniqueInput {
  id: ID
}

scalar Long

type Movie {
  id: ID!
  title: String!
  rating: Float!
  year: DateTime!
  actors(where: ActorWhereInput, orderBy: ActorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Actor!]
}

type MovieConnection {
  pageInfo: PageInfo!
  edges: [MovieEdge]!
  aggregate: AggregateMovie!
}

input MovieCreateInput {
  id: ID
  title: String!
  rating: Float!
  year: DateTime!
  actors: ActorCreateManyWithoutMoviesInput
}

input MovieCreateManyWithoutActorsInput {
  create: [MovieCreateWithoutActorsInput!]
  connect: [MovieWhereUniqueInput!]
}

input MovieCreateWithoutActorsInput {
  id: ID
  title: String!
  rating: Float!
  year: DateTime!
}

type MovieEdge {
  node: Movie!
  cursor: String!
}

enum MovieOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  rating_ASC
  rating_DESC
  year_ASC
  year_DESC
}

type MoviePreviousValues {
  id: ID!
  title: String!
  rating: Float!
  year: DateTime!
}

input MovieScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  year: DateTime
  year_not: DateTime
  year_in: [DateTime!]
  year_not_in: [DateTime!]
  year_lt: DateTime
  year_lte: DateTime
  year_gt: DateTime
  year_gte: DateTime
  AND: [MovieScalarWhereInput!]
  OR: [MovieScalarWhereInput!]
  NOT: [MovieScalarWhereInput!]
}

type MovieSubscriptionPayload {
  mutation: MutationType!
  node: Movie
  updatedFields: [String!]
  previousValues: MoviePreviousValues
}

input MovieSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MovieWhereInput
  AND: [MovieSubscriptionWhereInput!]
  OR: [MovieSubscriptionWhereInput!]
  NOT: [MovieSubscriptionWhereInput!]
}

input MovieUpdateInput {
  title: String
  rating: Float
  year: DateTime
  actors: ActorUpdateManyWithoutMoviesInput
}

input MovieUpdateManyDataInput {
  title: String
  rating: Float
  year: DateTime
}

input MovieUpdateManyMutationInput {
  title: String
  rating: Float
  year: DateTime
}

input MovieUpdateManyWithoutActorsInput {
  create: [MovieCreateWithoutActorsInput!]
  delete: [MovieWhereUniqueInput!]
  connect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  disconnect: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutActorsInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutActorsInput!]
  deleteMany: [MovieScalarWhereInput!]
  updateMany: [MovieUpdateManyWithWhereNestedInput!]
}

input MovieUpdateManyWithWhereNestedInput {
  where: MovieScalarWhereInput!
  data: MovieUpdateManyDataInput!
}

input MovieUpdateWithoutActorsDataInput {
  title: String
  rating: Float
  year: DateTime
}

input MovieUpdateWithWhereUniqueWithoutActorsInput {
  where: MovieWhereUniqueInput!
  data: MovieUpdateWithoutActorsDataInput!
}

input MovieUpsertWithWhereUniqueWithoutActorsInput {
  where: MovieWhereUniqueInput!
  update: MovieUpdateWithoutActorsDataInput!
  create: MovieCreateWithoutActorsInput!
}

input MovieWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  year: DateTime
  year_not: DateTime
  year_in: [DateTime!]
  year_not_in: [DateTime!]
  year_lt: DateTime
  year_lte: DateTime
  year_gt: DateTime
  year_gte: DateTime
  actors_every: ActorWhereInput
  actors_some: ActorWhereInput
  actors_none: ActorWhereInput
  AND: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
}

input MovieWhereUniqueInput {
  id: ID
}

type Mutation {
  createActor(data: ActorCreateInput!): Actor!
  updateActor(data: ActorUpdateInput!, where: ActorWhereUniqueInput!): Actor
  updateManyActors(data: ActorUpdateManyMutationInput!, where: ActorWhereInput): BatchPayload!
  upsertActor(where: ActorWhereUniqueInput!, create: ActorCreateInput!, update: ActorUpdateInput!): Actor!
  deleteActor(where: ActorWhereUniqueInput!): Actor
  deleteManyActors(where: ActorWhereInput): BatchPayload!
  createDirector(data: DirectorCreateInput!): Director!
  updateDirector(data: DirectorUpdateInput!, where: DirectorWhereUniqueInput!): Director
  updateManyDirectors(data: DirectorUpdateManyMutationInput!, where: DirectorWhereInput): BatchPayload!
  upsertDirector(where: DirectorWhereUniqueInput!, create: DirectorCreateInput!, update: DirectorUpdateInput!): Director!
  deleteDirector(where: DirectorWhereUniqueInput!): Director
  deleteManyDirectors(where: DirectorWhereInput): BatchPayload!
  createMovie(data: MovieCreateInput!): Movie!
  updateMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
  updateManyMovies(data: MovieUpdateManyMutationInput!, where: MovieWhereInput): BatchPayload!
  upsertMovie(where: MovieWhereUniqueInput!, create: MovieCreateInput!, update: MovieUpdateInput!): Movie!
  deleteMovie(where: MovieWhereUniqueInput!): Movie
  deleteManyMovies(where: MovieWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  actor(where: ActorWhereUniqueInput!): Actor
  actors(where: ActorWhereInput, orderBy: ActorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Actor]!
  actorsConnection(where: ActorWhereInput, orderBy: ActorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActorConnection!
  director(where: DirectorWhereUniqueInput!): Director
  directors(where: DirectorWhereInput, orderBy: DirectorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Director]!
  directorsConnection(where: DirectorWhereInput, orderBy: DirectorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DirectorConnection!
  movie(where: MovieWhereUniqueInput!): Movie
  movies(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movie]!
  moviesConnection(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MovieConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  actor(where: ActorSubscriptionWhereInput): ActorSubscriptionPayload
  director(where: DirectorSubscriptionWhereInput): DirectorSubscriptionPayload
  movie(where: MovieSubscriptionWhereInput): MovieSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  fullName: String!
  birthday: DateTime!
  username: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  fullName: String!
  birthday: DateTime!
  username: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  fullName_ASC
  fullName_DESC
  birthday_ASC
  birthday_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  fullName: String!
  birthday: DateTime!
  username: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  fullName: String
  birthday: DateTime
  username: String
  password: String
}

input UserUpdateManyMutationInput {
  fullName: String
  birthday: DateTime
  username: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  birthday: DateTime
  birthday_not: DateTime
  birthday_in: [DateTime!]
  birthday_not_in: [DateTime!]
  birthday_lt: DateTime
  birthday_lte: DateTime
  birthday_gt: DateTime
  birthday_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
